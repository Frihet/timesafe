var currentSidebar = null;

function sidebarShow(id) {
    var newSidebar = $(id);
    if (!newSidebar) { 
	return;
    }

    if (currentSidebar) {
	currentSidebar.style.display='none';
    }

    currentSidebar = newSidebar;
    currentSidebar . style.display="block";
}

function sidebarHide() {
    if (currentSidebar) {
	currentSidebar.style.display='none';
	currentSidebar = null;
    }
}

document.onkeypress = function(evt) {
    evt = (evt) ? evt : ((window.event) ? event : null);
    if (evt && evt.keyCode == 27) {
	sidebarHide();
    }
}

    function slotHandleArrowKeys(evt, input_id) {
	evt = (evt) ? evt : ((window.event) ? event : null);
	if (evt) {
	    var el=null;
	    var id_data_str = $(input_id).id.split('_');
	    var id_data=[parseInt(id_data_str[1]), parseInt(id_data_str[2]), parseInt(id_data_str[3]) ];
	
	    switch (evt.keyCode) {
	    case 37:
		el = $('time_' + id_data[0] + "_" + id_data[1] + "_" + (id_data[2]-1));
		break;    
	    case 38:
		el = $('time_' + id_data[0] + "_" + (id_data[1]-1) + "_" + id_data[2]);
		if (!el) {
		    el = $('time_' + (id_data[0]-1) + "_" + id_data[1] + "_" + id_data[2]);
		}
		break;    
	    case 39:
		el = $('time_' + id_data[0] + "_" + id_data[1] + "_" + (id_data[2]+1));
		break;    
	    case 40:
		el = $('time_' + id_data[0] + "_" + (id_data[1]+1) + "_" + id_data[2]);
		if (!el) {
		    el = $('time_' + (id_data[0]+1) + "_" + id_data[1] + "_" + id_data[2]);
		}
		/*	    if (!el) {
			    el = $('save');
			    }*/
		break;
	    case 27:
		sidebarHide();
		break;
	    }

	    if (el) {
		el.focus();
	    }
	}
    }


// this function is needed to work around 
// a bug in IE related to element attributes
function hasClass(obj) {
    var result = false;
    if (obj.getAttributeNode("class") != null) {
	result = obj.getAttributeNode("class").value;
    }
    return result;
}   

function stripe(id) {
		
    // the flag we'll use to keep track of 
    // whether the current row is odd or even
    var even = false;
		
    // obtain a reference to the desired tables
    // ... and iterate through them
    var table_list;
    if (id != null) {
	table_list = [$(id)];
    } else {
	table_list = $$('.striped');
    }
    
    for(var tab=0; tab<table_list.length;tab++) {
		
	var table = table_list[tab];
	if (! table) { continue; }
		    
	// by definition, tables can have more than one tbody
	// element, so we'll have to get the list of child
	// &lt;tbody&gt;s 
	var tbodies = table.getElementsByTagName("tbody");
		    
	// and iterate through them...
	for (var h = 0; h < tbodies.length; h++) {
			
	    // find all the &lt;tr&gt; elements... 
	    var trs = tbodies[h].getElementsByTagName("tr");
			
	    // ... and iterate through them
	    for (var i = 0; i < trs.length; i++) {

		var parent = trs[i].parentNode;
		while(parent && parent.nodeName.toLowerCase() != 'tbody') 
		    {
			parent = parent.parentNode;
		    }
	
		if( parent != tbodies[h] ) 
		    {
			continue;
		    }
				
		    
		// avoid rows that have a class attribute
		// or backgroundColor style
		if (! hasClass(trs[i]) &&
		    ! trs[i].style.backgroundColor) {
 		  
		    // get all the cells in this row...
		    var tds = trs[i].getElementsByTagName("td");
		    var ths = trs[i].getElementsByTagName("th");
		    
		    // and iterate through them...
		    for (var j = 0; j < tds.length; j++) {
			
			var mytd = tds[j];
			
			mytd.className = even?'even':'odd';
		    }
		    for (var j = 0; j < ths.length; j++) {
			
			var myth = ths[j];
			
			myth.className = even?'even':'odd';
		    }
		}
		// flip from odd to even, or vice-versa
		even =  ! even;
	    }
	}
    }
}

function submitAndReloadColumnList(task,columnId, rowId, itemId, tableId, selectId) {
    //    alert($(columnId).value + ", "+ tableId);
    var url = 'index.php?action=form&task=' + encodeURIComponent(task) + 
	'&column_id=' + encodeURIComponent(columnId) +
	'&value=' + encodeURIComponent($(itemId).value) +
	'&id=' + encodeURIComponent(rowId);
    new Ajax.Request(url, {
	    onSuccess: function(transport) {
		
		var lines = transport.responseText.split('\n');
		var sel = $(selectId);
		
		while(sel.length>0) 
		    {
			sel.remove(0);
		    }
		
		for (var i=0; i<lines.length; i++) {
		    var data = lines[i].split('\t');
		    //alert(data[1] + ", " + data[0]);
		    if( data[0] && data[1] )
			sel.add(new Option(data[1], data[0]), null);
		}
		
		new Ajax.Request('index.php?action=form&task=fetchListTable'+
				 '&column_id=' + encodeURIComponent(columnId) + 
				 '&select_id=' + encodeURIComponent(selectId) +
				 '&table_id=' + encodeURIComponent(tableId),
				 {
				     onSuccess: function(transport) {
					 var oldTab = $(tableId);
					 var parent = oldTab.parentNode;
					 parent.removeChild(oldTab);
					 parent.innerHTML = transport.responseText;
					 stripe(tableId);
				     }
				     
				 });			       
	    }
    });
    
}



/*************************************************************
 *    DYNIFS - Dynamic IFrame Auto Size v1.0.0
 *
 *    Copyright (C) 2006, Markus (phpMiX)
 *    This script is released under GPL License.
 *    Feel free to use this script (or part of it) wherever you need
 *    it ...but please, give credit to original author. Thank you. :-)
 *    We will also appreciate any links you could give us.
 *    http://www.phpmix.org
 *
 *    Enjoy! ;-)
 *************************************************************/

var dynamicIFrame = {
    // Storage for known IFrames.
    iframes: {},
    // Here we save any previously installed onresize handler.
    oldresize: null,
    // Flag that tell us if we have already installed our onresize handler.
    ready: false,
    // The document dimensions last time onresize was executed.
    dim: [-1,-1],
    // Timer ID used to defer the actual resize action.
    timerID: 0,
    // Obtain the dimensions (width,height) of the given document.
    getDim: function(d) {
	var w=200, h=200, scr_h, off_h;
	if( d.height ) { return [d.width,d.height]; }
	with( d.body ) {
	    if( scrollHeight ) { h=scr_h=scrollHeight; w=scrollWidth; }
	    if( offsetHeight ) { h=off_h=offsetHeight; w=offsetWidth; }
	    if( scr_h && off_h ) h=Math.max(scr_h, off_h);
	}
	return [w,h];
    },
    // This is our window.onresize handler.
    onresize: function() {
	// Invoke any previously installed onresize handler.
	if( typeof this.oldresize == 'function' ) { this.oldresize(); }
	// Check if the document dimensions really changed.
	var dim = this.getDim(document);
	if( this.dim[0] == dim[0] && this.dim[1] == dim[1] ) return;
	// Defer the resize action to prevent endless loop in quirksmode.
	if( this.timerID ) return;
	this.timerID = setTimeout('dynamicIFrame.deferred_resize();', 10);
    },
    // This is where the actual IFrame resize is invoked.
    deferred_resize: function() {
	// Walk the list of known IFrames to see if they need to be resized.
	for( var id in this.iframes ) this.resize(id);
	// Store resulting document dimensions.
	this.dim = this.getDim(document);
	// Clear the timer flag.
	this.timerID = 0;
    },
    // This is invoked when the IFrame is loaded or when the main window is resized.
    resize: function(id) {
	// Browser compatibility check.
	if( !window.frames || !window.frames[id] || !document.getElementById || !document.body )
	    return;
	// Get references to the IFrame window and layer.
	var iframe = window.frames[id];
	var div = document.getElementById(id);
	if( !div ) return;
	// Save the IFrame id for later use in our onresize handler.
	if( !this.iframes[id] ) {
	    this.iframes[id] = true;
	}
	// Should we inject our onresize event handler?
	if( !this.ready ) {
	    this.ready = true;
	    this.oldresize = window.onresize;
	    window.onresize = new Function('dynamicIFrame.onresize();');
	}
	// This appears to be necessary in MSIE to compute the height
	// when the IFrame'd document is in quirksmode.
	// OTOH, it doesn't seem to break anything in standards mode, so...
	if( document.all ) div.style.height = '0px';
	// Resize the IFrame container.
	var dim = this.getDim(iframe.document);
	div.style.height = (dim[1]+30) + 'px';
    }
};
var billableId = 30;

var subdivTags=[
		{'id':0, 'name':'Div4A'},
		{'id':1, 'name':'Div4B'},
		{'id':2, 'name':'Div4C'},
		{'id':3, 'name':'Div4D'},
		{'id':4, 'name':'Div4E'},
		{'id':5, 'name':'Div4F'},
		{'id':6, 'name':'Div4G'}
		];


var divTags=[
	     {'id':10, 'name':'Div1'},
	     {'id':11, 'name':'Div2'},
	     {'id':12, 'name':'Div3'},
	     {'id':13, 'name':'Div4'},
	     {'id':14, 'name':'Div5'},
	     {'id':15, 'name':'Div6'},
	     {'id':16, 'name':'Div7'}
	     ];

var projectTags={
    '0':[
{'id':1000, 'name':'Premises'},
{'id':1001, 'name':'Board meeting'},
{'id':1002, 'name':'Board secretary'},
{'id':1003, 'name':'Strategy'},
{'id':1004, 'name':'Security'},
{'id':1005, 'name':'Div3 - Treasury manager'},
{'id':1006, 'name':'Div1 - Organisation manager'},
{'id':1007, 'name':'Div5 - Quality management'},
{'id':1008, 'name':'Div2 - Marketing management'},
{'id':1009, 'name':'Div2 - Sales management'},
{'id':1010, 'name':'Control VSS, VSD, profit, C/B and VAR'},
{'id':1011, 'name':'Finance & estates'},
{'id':1012, 'name':'COO'},
{'id':1013, 'name':'CEO'},
{'id':1014, 'name':'CAO'},
{'id':1015, 'name':'CIdO'},
{'id':1016, 'name':'Monthly Board reports'},
{'id':1017, 'name':'EC'},
{'id':1018, 'name':'AC'},
{'id':1019, 'name':'Legal'},
{'id':1020, 'name':'FCB'},
	 ],
    '1':[
{'id':1100, 'name':'Staff meeting'},
	 ],
    '2':[
{'id':1200, 'name':'Sales'},
	 ],
    '3':[
{'id':1300, 'name':'Finance'},
	 ],
    '4':[
{'id':1400, 'name':'DC meeting'},
	 ],
    '5':[
{'id':1500, 'name':'ISO 9000'},
	 ],
    '6':[
{'id':1600, 'name':'Website'},
	 ],
    '7':[
{'id':1700, 'name':'Time registry'},
	 ],
    '8':[
{'id':1800, 'name':''},
	 ],
    '9':[
{'id':1900, 'name':'Phase 2009.02'},
{'id':1901, 'name':'Phase 2009.05'},
{'id':1902, 'name':'Phase 2009.07'},
	 ],
    '10':[
{'id':2000, 'name':'Phase 2009.03'},
{'id':2001, 'name':'Phase 2009.04'},
{'id':2002, 'name':'Phase 2009.06'},
	  ],
    '11':[
{'id':2100, 'name':'Phase 2009.05'},
{'id':2101, 'name':'Phase 2009.08'},
{'id':2102, 'name':'Phase 2009.11'},
	  ],
    '12':[
{'id':2200, 'name':'Messaging component'},
	  ],
    '13':[
				],
    '14':[
{'id':2400, 'name':'Phase 2009.02'},
{'id':2401, 'name':'Phase 2009.06'},
{'id':2402, 'name':'Phase 2009.12'},
	  ],
    '15':[
{'id':2500, 'name':'Phase 2009.06'},
{'id':2501, 'name':'Phase 2009.09'},
	  ],
    '16':[
{'id':2600, 'name':'CMDB'},
	  ],
    '17':[
{'id':2700, 'name':'Phone support'},
	  ],
    '18':[
{'id':2800, 'name':'Phase 2009.05'},
{'id':2801, 'name':'Phase 2009.07'},
{'id':2802, 'name':'Phase 2009.09'},
{'id':2803, 'name':'Phase 2009.11'},
	  ]
};

var commonTags = [
		];

var overtimeTags = [
		    {'id':25, 'name':'40 % overtime'},
		    {'id':26, 'name':'100 % overtime'},
		    ];

var externalTags = [
		    {'id':30, 'name':'Billable'},
		    {'id':20, 'name':'Travel'},
		    {'id':21, 'name':'Meeting'},
		    ];

		
		
function isBillable(id)
{
    var tag = $('tag_'+id);
    for(var i=0; i<tag.options.length; i++) {
	opt = tag.options[i];
	if (opt.selected && opt.value==billableId) {
	    return true;
	}
    }
    return false;
}

function hasSubdivision()
{
		
}

function notifyClear(id)
{
    var notification = $('notification_'+id);
    notification.innerHTML ="";;
}

function notify(id, msg)
{
    var notification = $('notification_'+id);
    notification.innerHTML += "<div class='error'>" + msg + "</div>";
}

function addOptions(select, optionArr) {
    for( var i=0; i<optionArr.length; i++) {
	var opt = optionArr[i];
	select.add(new Option(opt.name, opt.id), null);
    }
}

function isInternal(projectId)
{
    return projectId <= 8;
}

function isProject(projectId)
{
    return projectId >6;
}

function makeTagSelect(project){
    var tags = $('tags');
    while(tags.length > 0) {
	tags.remove(0);
    }

    addOptions(tags,commonTags);
    addOptions(tags,overtimeTags);

    if (!isInternal(project.value)) {
	addOptions(tags,externalTags);
    }
		
    if (isProject(project.value)) {
	addOptions(tags,subdivTags);
    }
    addOptions(tags,projectTags[project.value]);
}

function countTags(checkTags) {
    var allTags = $('tags');
    var res = 0;
		
    for (var i=0; i<checkTags.length; i++) {
	for (var j=0; j<allTags.length; j++) {
	    var opt = allTags.options[j];
	    if (opt.selected && opt.value == checkTags[i].id) {
		res +=1;
	    }
	}
    }
		
    return res;
}

String.prototype.stripHTML = function () {
    return this.replace(/<[^>]*>/g, "");
}
		
String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g,"");
}

function parseFloatNazi(str) 
{
    str_arr = str.split(':');
    if (str_arr.length == 2) {
	if (str_arr[0].match(/^[0-9]+$/) && str_arr[1].match(/^[0-9]+$/))
	    return parseInt(str_arr[0]) + (1.0/60.0)*parseInt(str_arr[0]);
	return NaN;
    }
    var str2 = str.replace(/,/g,'.');

    if (str2.match(/^[0-9]*\.?[0-9]+$/))
	return parseFloat(str2);
    return NaN;
}


function validate(id)
{
    notifyClear(id);
    var has_error = false;
    var time = $('time_'+id);
    var billable = isBillable(id);

    if (time.value!='') {

	var time_val = parseFloatNazi(time.value);
	var description = $('description_'+id);
    
	var project_idx = id.split('_')[0];
	var project_id = $('project_id_'+project_idx);
	if (isNaN(time_val)) {
	    has_error=true;
	    notify(id, "Time spent is not a number");
	} else { 
	    if (billable && ((2*time_val) != parseFloat(parseInt(2*time_val)))) {
		has_error=true;
		notify(id, 'Time spent is not an even half hour');
	    }
	    if (time_val > 20) {
		notify(id, 'Unreasonably many hours in one day');
		has_error=true;
	    }
	}
	/*    
	      if (isProject(project_id) && (countTags(subdivTags) != 1)) {
	      notify(id, 'Choose exactly one subdivision tag');
	      }
    
	      if (countTags(overtimeTags) > 1) {
	      notify(id, 'Multiple overtime types chosen');
	      }
    
	      if(!isInternal(project_id) && !billable) {
	      notify(id, 'External work is usually billable');
	      }
	*/
	if (description) {
	    var description_value = $('description_' + id).value;//tinyMCE.get('description').getContent();	    
	    if(description_value.stripHTML().trim()=='') {
		has_error=true;
		notify(id, 'No description of work given');
	    }
	}
    }

    $('td_'+id).className=has_error?"error":"modified";
    
}
