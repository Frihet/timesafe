<?php

define('CI_ACTION_CREATE', 0);
define('CI_ACTION_REMOVE', 1);
define('CI_ACTION_CHANGE_TYPE', 2);
define('CI_ACTION_CHANGE_COLUMN', 3);
define('CI_ACTION_ADD_DEPENDENCY', 4);
define('CI_ACTION_REMOVE_DEPENDENCY', 5);


class ciAction
{
	function getDescription($id) 
	{
		$desc=array(CI_ACTION_CREATE => 'CI created',
			    CI_ACTION_REMOVE => 'CI removed',
			    CI_ACTION_CHANGE_TYPE => 'CI type changed',
			    CI_ACTION_CHANGE_COLUMN => 'CI column value changed',
			    CI_ACTION_ADD_DEPENDENCY => 'Added new dependency',
			    CI_ACTION_REMOVE_DEPENDENCY => 'Removed dependency');
		return $desc[$id];
	}
    
    
}

class log
{
	function add($ci_id, $action, $arg=null) 
	{
		//echo "add($ci_id, $action, $arg);<br>";
        
        
		$value = array();
		$param=array();
                
		switch ($action) {
			case CI_ACTION_CREATE:
			case CI_ACTION_REMOVE:
				$query = "
insert into ci_log 
(
        create_time, ci_id, action, user_id
) 
values 
(
        now(), :ci_id, :action, :user_id
)";
				$param = array(':ci_id'=>$ci_id, ':action'=>$action, ':user_id'=>ciUser::$me->id);
				db::query($query, $param);
				break;
            
			case CI_ACTION_CHANGE_TYPE:
				$query = "
insert into ci_log 
(
        create_time, ci_id, action, type_id_old, user_id
) 
select now(), :ci_id, :action, ci_type_id, :user_id
from ci
where id = :ci_id";
				$param = array(':ci_id'=>$ci_id, ':action'=>$action, ':user_id'=>ciUser::$me->id);
				db::query($query, $param);
				break;
            
			case CI_ACTION_CHANGE_COLUMN:
				$query = "
insert into ci_log 
(
        create_time, ci_id, action, column_id, column_value_old, user_id
) 
select now(), :ci_id, :action, :column_id, value, :user_id
from ci_column_view
where id = :ci_id and column_type_id = :column_id";

				$param = array(':ci_id'=>$ci_id, ':action'=>$action, ':column_id'=>$arg, ':user_id'=>ciUser::$me->id);
				db::query($query, $param);
            
				break;

			case CI_ACTION_ADD_DEPENDENCY:
			case CI_ACTION_REMOVE_DEPENDENCY:
				$query = "
insert into ci_log 
(
        create_time, ci_id, action, dependency_id, user_id
)
values
(
        now(), :ci_id, :action, :dependency_id, :user_id
)";
            
				$param = array(':ci_id'=>$ci_id, ':action'=>$action, ':dependency_id'=>$arg, ':user_id'=>ciUser::$me->id);
				db::query($query, $param);
				break;
		}
	}
}


class dbItem
{

	/**
	 * Returns an array of all public properties of this object
	 * type. By convention, this is exactly the same as the list of
	 * fields in the database, and also the same thing as all fields
	 * whose name does not begin with an underscore.
	 */
	function getPublicProperties() {
		static $cache = null;
		if (is_null( $cache )) {
			$cache = array();
			foreach (get_class_vars( get_class( $this ) ) as $key=>$val) {
				if (substr( $key, 0, 1 ) != '_') {
					$cache[] = $key;
				}
			}
		}
		return $cache;
	}

	function initFromArray($arr)
	{
		$count = 0;
        
		foreach ($this->getPublicProperties() as $key) {
			if (array_key_exists($key, $arr)) {
				$this->$key = $arr[$key];
				$count ++;
			}
		}
		return $count;
        
        
	}
    
    
}

class ciType
{
	static $types=null;
	static $shapes=null;
	static $ids=null;
    
	function getTypes() 
	{
		ciType::load();
		return ciType::$types;
	}
	
	function getName($id) 
	{
		ciType::load();
		return ciType::$types[$id];
	}
	
	function getShape($id) 
	{
		ciType::load();
		return ciType::$shapes[$id];
	}
    
	function getId($name) 
	{
		ciType::load();
		return ciType::$ids[$name];
	}

	function getShapes()
	{
		return array('box'=>'Box', 
			     'diamond' => 'Diamond',
			     'doubleoctagon'=>'Double octagon',
			     'ellipse'=>'Ellipse', 
			     'house'=>'House',
			     'octagon'=>'Octagon',
			     'triangle' => 'Triangle');
	}
    
	function load()
	{
		if (ciType::$types != null) {
			return;
		}
        
		foreach(db::fetchList("select * from ci_type where deleted=false order by name") as $row) {
			ciType::$types[$row['id']] = $row['name'];
			ciType::$ids[$row['name']] = $row['id'];
			ciType::$shapes[$row['id']] = $row['shape'];
		}
	}


}


class ciColumnList
{
	static $items = null;
	static $name_lookup = null;

	function getItems($column_id) 
	{
		ciColumnList::load();
		return ciColumnList::$items[$column_id];
	}
    
	function getName($id) 
	{
		ciColumnList::load();
		return ciColumnList::$name_lookup[$id];
	}
    
	function load() 
	{
		if (ciColumnList::$items != null) {
			return;
		}
        

		foreach(db::fetchList("select * from ci_column_list order by name") as $row) {
			if(!$row['deleted']) {
				ciColumnList::$items[$row['ci_column_type_id']][$row['id']] = $row['name'];
			}
			ciColumnList::$name_lookup[$row['id']] = $row['name'];
		}
	}
}


class ciColumnType
{
	static $id_lookup=null;
	static $name_lookup=null;
	static $type_lookup=null;

	function getId($name) 
	{
		ciColumnType::load();
		return ciColumnType::$id_lookup[$name];
        
	}
    
	function getName($id)
	{
		ciColumnType::load();
		return ciColumnType::$name_lookup[$id];
	}

	function getType($id)
	{
		ciColumnType::load();
		return ciColumnType::$type_lookup[$id];

	}

	function getColumns($include_none = false)
	{
		ciColumnType::load();
		if ( $include_none) 
		{
			return array(-1 => 'Any') +ciColumnType::$name_lookup;
		}
		
		return ciColumnType::$name_lookup;
	}
    
	function getTypes()
	{
		return array(CI_COLUMN_TEXT=>'Unformated text',
			     CI_COLUMN_TEXT_FORMATED=>'Multiline text with formating',
			     CI_COLUMN_LIST=>'List',
			     CI_COLUMN_IFRAME=>'IFrame'/*
							CI_COLUMN_LINK_LIST=>'List of links'*/);
	}
    
	function load()
	{
		if (ciColumnType::$id_lookup != null) {
			return;
		}
        
		foreach(db::fetchList("select * from ci_column_type where deleted=false order by name") as $row) {
			ciColumnType::$id_lookup[$row['name']] = $row['id'];
			ciColumnType::$name_lookup[$row['id']] = $row['name'];
			ciColumnType::$type_lookup[$row['id']] = $row['type'];
		}
        
	}

}

function ciCompare($a, $b) 
{
	return strcasecmp($a->getDescription(), $b->getDescription());
}

class ci
extends dbItem
{
	static $_table = "ci_view";
	static $_dependency_list = null;
	static $_revisions=null;
    
	var $type_name;
	var $id;
	var $ci_type_id;
	var $_ci_column=null;
	var $_dependants;
	var $_dependencies;
	var $_direct_dependant;
	var $_direct_dependency;
	var $update_time;
	
	static $_cache = array();

	function count()
	{
		$res = db::fetchList("select count(*) cnt from $table");
		$row = $res->fetch();
		return $row['cnt'];
	}

	function apply($edit) 
	{
		if ($edit['ci_id'] != $this->id) {
			return;
		}
        
		//        echo "Apply revision ".$edit['id']." to item " .$this->id . "<br>";
        
		unset(ci::$_cache[$this->id]);
	
		if($edit['action'] == CI_ACTION_CHANGE_COLUMN) {
			$this->_ci_column[$edit['column_id']] = $edit['column_value_old'];
		}
		else if($edit['action'] == CI_ACTION_CHANGE_TYPE) {
			$this->ci_type_id = $edit['type_id_old'];
		}
	}
    

	function get($name) 
	{
		return $this->_ci_column[ciColumnType::getId($name)];
	}
    
	function getDescription($long=true) 
	{
		$nam = $this->get('Name');
		return ($nam?$nam:'<unnamed>') . ($long?(' <' . $this->type_name. ">"):'');
	}
    

	function removeDependency($other_id) 
	{
		$delete_query = "
delete from ci_dependency
where dependency_id = :other_id
and ci_id = :my_id";
		$delete_arr = array(":my_id" => $this->id, ":other_id" => $other_id);
		$res = db::query($delete_query, $delete_arr);
        
		if ($res->rowCount()) {
			log::add($this->id, CI_ACTION_REMOVE_DEPENDENCY, $other_id);
		}
	}
    
	function addDependency($other_id) 
	{
		$arr = array(':my_id' => $this->id, ':other_id' => $other_id);
        
		$res = db::query("
insert into ci_dependency 
(ci_id, dependency_id) 
values (:my_id, :other_id)
", $arr);
		if ($res->rowCount()) {
			log::add($this->id, CI_ACTION_ADD_DEPENDENCY, $other_id);
		}
	}
    
	function getDependencies() 
	{
		if($this->_dependencies === null) 
		{
			$this->_dependencies = ci::_getDependencies(array($this->id), true);
		}
			
		return $this->_dependencies;
	}

	function isDirectDependency($id) 
	{
		$this->getDirectDependencies();
		return array_key_exists($id, $this->_direct_dependencies);
	}
    
	function isDependency($id) 
	{
		$this->getDependencies();
        
		return array_key_exists($id, $this->_dependencies);
	}
    
    
	function getDependants() 
	{
		if ($this->_dependants === null) 
		{
			$this->_dependants = ci::_getDependants(array($this->id), true);
		}
		return $this->_dependants;
	}

	function _loadDependencies()
	{
		ci::_loadRevisions();

	}
	

	function _getDependencies($id_arr, $all=false) 
	{
		ci::_loadDependencies();
			
		$dep_arr = array();
		$id_arr_map = array();
            
		foreach($id_arr as $id) {
			$id_arr_map[$id] = true;
		}
			
		if( !$all) 
		{
					
			foreach(ci::$_dependency_list as $dep) 
			{
				if(array_key_exists($dep['ci_id'], $id_arr_map))
				{
					$dep_arr[] = $dep['dependency_id'];
				}
			}
		}
		else 
		{
			$done = array();
			$prev = $id_arr_map;
					
			while (true) 
			{					
				$stop = true;
				foreach(ci::$_dependency_list as $dep) 
				{
									
					if(array_key_exists($dep['ci_id'], $prev) &&
					   !array_key_exists($dep['dependency_id'], $done)) 
					{
						$done[$dep['dependency_id']] = true;
						$dep_arr[] = $dep['dependency_id'];
						$next[$dep['dependency_id']] = true;
						$stop = false;
					}
				}
				if ($stop) 
				{
					break;
				}
				$prev = $next;
			}
		}

		return ci::fetch(array('id_arr' => $dep_arr));

	}
	
	function _getDependants($id_arr, $all=false) 
	{
		ci::_loadDependencies();
			
		$dep_arr = array();
		$id_arr_map = array();
			
		foreach($id_arr as $id) 
		{
			$id_arr_map[$id] = true;
		}
			
		if( !$all) 
		{
					
			foreach(ci::$_dependency_list as $dep) 
			{
				if(array_key_exists($dep['dependency_id'], $id_arr_map))
				{
					$dep_arr[] = $dep['ci_id'];
				}
			}
		}
		else 
		{
			$done = array();
			$prev = $id_arr_map;
					
			while (true) 
			{					
				$stop = true;
				foreach(ci::$_dependency_list as $dep) 
				{
									
					if(array_key_exists($dep['dependency_id'], $prev) &&
					   !array_key_exists($dep['ci_id'], $done)) 
					{
						$done[$dep['ci_id']] = true;
						$dep_arr[] = $dep['ci_id'];
						$next[$dep['ci_id']] = true;
						$stop = false;
					}
				}
				if ($stop) 
				{
					break;
				}
				$prev = $next;
			}
		}

		return ci::fetch(array('id_arr' => $dep_arr));

	}
	
    
	function getDirectDependencies() 
	{
		if ($this->_direct_dependencies === null) {
			$this->_direct_dependencies = ci::_getDependencies(array($this->id));
		}
		return $this->_direct_dependencies;
	}
    
	function getDirectDependants() 
	{
		if ($this->_direct_dependants === null) {
			$this->_direct_dependants = ci::_getDependants(array($this->id));
		}
		return $this->_direct_dependants;
	}
	
	function _getDirectDependants($id_arr, $exclude=null) 
	{
		$query = "
select ci_id
from ci_dependency 
where dependency_id in 
";
		list($id_arr_param, $id_arr_named) = db::in_list($id_arr);
		$query .= "($id_arr_param)";

		$arr = $id_arr_named;

		$dep_arr = db::fetchList($query, $arr);
		$dep_arr2 = array();
		$direct = array();
        
		foreach($dep_arr as $dep) {
			$dep_arr2[] = $dep['ci_id'];
		}
        
		$param = array('id_arr' => $dep_arr2);
		if($exclude) 
		{
			$param['exclude'] = $exclude;
		}
		
		$res = ci::fetch($param);

		return $res;
	}
    
	function isDirectDependant($id) 
	{
		$this->getDirectDependants();
		return array_key_exists($id, $this->_direct_dependants);
	}
    
	function isDependant($id) 
	{
		$this->getDependants();
		return array_key_exists($id, $this->_dependants);
	}

	function applyAll()
	{
		ci::_loadRevisions();
		if(array_key_exists($this->id, ci::$_revisions)) {
			foreach(ci::$_revisions[$this->id] as $edit) {
				$this->apply($edit);
			}
		}
        
	}
    
	function _loadRevisions()
	{
		if (ci::$_revisions!==null) {
			return;
		}
        
		$revision_id = param('revision_id');
		if ($revision_id === null) {
			ci::$_revisions = array();
			$rev=array();
		}
		else {
            
			$rev = db::fetchList('
select cl2.id, extract (epoch from cl2.create_time) as create_time, cl2.ci_id, cl2.action, cl2.type_id_old, cl2.column_id, cl2.column_value_old, cl2.dependency_id
from ci_log as cl
join ci_log as cl2
on cl2.create_time > cl.create_time
where cl.id=:revision_id
order by create_time desc', 
					     array(':revision_id'=>$revision_id));
			ci::$_revisions=array();
			foreach($rev as $revision) {
				ci::$_revisions[$revision['ci_id']][] = $revision;
			}
		}
        

		$query = "
select ci_id, dependency_id
from ci_dependency 
";
		$remove=array();
		$add = array();
        
		foreach($rev as $edit) {
			switch ($edit['action']) {
				case CI_ACTION_ADD_DEPENDENCY:
					$remove[$edit['ci_id']][$edit['dependency_id']]=true;
					$add[$edit['ci_id']][$edit['dependency_id']]=false;
					break;
                
				case CI_ACTION_REMOVE_DEPENDENCY:
					$remove[$edit['ci_id']][$edit['dependency_id']]=false;
					$add[$edit['ci_id']][$edit['dependency_id']]=true;
					break;
			}
		}

		$dep_list = array();
        
		foreach(db::fetchList($query) as $dep) {
			$id = $dep['ci_id'];
			$dep_id = $dep['dependency_id'];
            
			if(array_key_exists($id, $remove) && array_key_exists($dep_id, $remove[$id]) && $remove[$id][$dep_id]) {
				continue;
			}
			$dep_list[] = $dep;
		}
		foreach($add as $ci_id => $add_list) {
			foreach($add_list as $dep_id => $doit) {
				if ($doit) {
					$dep_list[] = array('ci_id'=>$ci_id, 'dependency_id'=>$dep_id);
				}
			}
		}
            
		ci::$_dependency_list = $dep_list;
        
        
	}
    


	function fetch($param=array()) 
	{
		if (array_key_exists('id_arr', $param)) {
				
			$id_arr = $param['id_arr'];
			$id_arr2=array();
			$res=array();
				
			foreach($id_arr as $id) 
			{
				if (array_key_exists($id, ci::$_cache)) 
				{
					$res[$id] = ci::$_cache[$id];
				}
				else 
				{
					$id_arr2[] = $id;
				}
			}
			if (count($id_arr2)) 
			{
				$param['id_arr'] = $id_arr2;
				$res2 = ci::fetchUncached($param);
				$res = $res + $res2;
			}
			return ci::sortFetchResult($res);
		}
		else 
		{
			return ci::sortFetchResult(ci::fetchUncached($param));
		}
		
	}


	function sortFetchResult($arr) 
	{
			
		uasort($arr,"ciCompare");
		return $arr;
	}
	
	
	function fetchUncached($param=array()) 
	{
		$where = array();
		$db_param = array();
		$limit = "";
		$offset = "";
		$join = "";
			
		$where[] = "ci_view.deleted = false";
        
		if (array_key_exists('id_arr', $param)) {
			if (count($param['id_arr'])==0) 
			{
				return array();
							
			}
					
			list($id_arr_param, $id_arr_named) = db::in_list($param['id_arr']);
			$where[] = "id in ($id_arr_param)";
			$db_param = array_merge($db_param, $id_arr_named);
		}
			
		if (array_key_exists('exclude', $param)) {
					
			list($id_arr_param, $id_arr_named) = db::in_list($param['exclude']);
			$where[] = "id not in ($id_arr_param)";
			$db_param = array_merge($db_param, $id_arr_named);
		}
			
		if (array_key_exists('filter_column', $param)) {
			$filter = $param['filter_column'];
					
			if (ciColumnType::getType($filter[0]) == CI_COLUMN_LIST) 
			{
				$join .= "
join ci_column cc
on cc.ci_id = ci_view.id and cc.ci_column_type_id = :column_type
join ci_column_list cl
on cc.value = cl.id
";
				$column = "cl.name";
							
			}
			else 
			{
							
				$join .= "
join ci_column cc
on cc.ci_id = ci_view.id and cc.ci_column_type_id = :column_type";
				$column = "cc.value";

			}
					
			$i = 0;
					
			$where_parts=array();
					

			foreach(explode(' ', $filter[1]) as $val) 
			{
				$where_parts[] = "lower($column) like lower(:filter_value_$i)";
				$db_param[":filter_value_$i"] = "%$val%";
				$i++;
							
			}
			$where[] = implode(" or ", $where_parts);
					
					
			$db_param[':column_type'] = $filter[0];
		}
		if (array_key_exists('filter_type', $param)) {
			$filter = $param['filter_type'];
					
			$where[] = "ci_type_id = :filter_type_id";
			$db_param[':filter_type_id'] = $filter;
		}
			
		if (array_key_exists('limit', $param)) {
			$limit = "limit " . $param['limit'];
		}
			
		if (array_key_exists('offset', $param)) {
			$limit = "offset " . $param['offset'];
		}
			
		$where_str = "";
		if (count($where)) {
			$where_str = "where " . implode(' and ', $where);
		}
			
		$arr = db::fetchList("select ci_view.*, extract(epoch from log.update_time) as update_time from ci_view left join (select max(create_time) as update_time, ci_id from ci_log group by ci_id) log on log.ci_id = ci_view.id $join $where_str $limit $offset", $db_param);
			
		if(!count($arr)){
			return array();
		}
			
			
		$col_id_arr = array();
			
		$out = array();
		foreach( $arr as $row) {
			$ci = new ci();
			$ci->initFromArray($row);
			ci::$_cache[$ci->id] = $ci;
					
			$out[$row['id']] = $ci;
			$col_id_arr[] = $row['id'];
		}
			
		list($col_id_arr_param, $col_id_arr_named) = db::in_list($col_id_arr);
		
		$arr2 = db::fetchList("select * from ci_column_view where id in ($col_id_arr_param) order by name", $col_id_arr_named);
			
		foreach( $arr2 as $row) {
			$out[$row['id']]->_ci_column[$row['column_type_id']] = $row['value'];
			$out[$row['id']]->applyAll();
		}
			
		return $out;
	}
}


class db
{
	static $db;
	static $last_res;
	static $last_count=null;
	static $query_count=0;
	static $query_time = 0;
    
	function init()
	{
        
		try {
			self::$db = new PDO(DB_DSN, DB_USER, DB_PASSWORD);
			self::$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
		} catch (PDOException $e) {
			return false;
		}
		return true;
	}

	function in_list($arr) 
	{
		static $counter=0;
		$out1 = array();
		$out2 = array();
		foreach($arr as $it) {
			$out1[] = ':list_item_' . $counter;
			$out2[':list_item_' . $counter] = $it;
			$counter++;
		}
		return array(implode(", ",$out1), $out2);
	}
    
	function lastInsertId($param) 
	{
		return self::$db->lastInsertId($param);
	}
	

	function query($q, $param=array())
	{
		self::$query_count += 1;
		$t1 = microtime(true);
		try 
		{
			$res = self::$db->prepare($q);

			$res->execute($param);
			$info = $res->errorInfo();

		}
		catch(PDOException $e) {
			error($e->getMessage());
		}
		         
		$t2 = microtime(true);
		db::$query_time += ($t2-$t1);

		/*
		 echo "<pre>";
		 echo $q;
		 echo "\n";
		 var_dump($param);
		 echo "</pre>";
		*/
		db::$last_res = $res;
		db::$last_count=null;
		return $res;
	}

	function fetchList($q, $param=Array()) 
	{
		$res = db::query($q, $param);
		$out = array();
		while($row = $res->fetch()) {
			$out[] = $row;
		}
		db::$last_count = $res->rowCount();
		$res->closeCursor();        
		return $out;
	}

	function fetchRow($q, $param=Array()) 
	{
		$res = db::query($q, $param);
		$row = $res->fetch();
		db::$last_count = $res->rowCount();
		$res->closeCursor();
		return $row;
	}

	function fetchItem($q, $param=Array()) 
	{
		$res = db::query($q, $param);
		$row = $res->fetch();
		db::$last_count = $res->rowCount();
		$res->closeCursor();
		return $row[0];
	}

	function count()
	{
		if (db::$last_count !== null) {
			return db::$last_count;
		}
		return db::$last_res->rowCount();
	}

}


class ciUser
extends dbItem
{
	static $me;
	var $id;
	var $username;
	var $fullname;
	var $password;
	var $email;
	var $deleted;
    
	function init()
	{
		ciUser::$me = new ciUser();
		$user_list = db::fetchList('select * from ci_user limit 1');
		ciUser::$me->initFromArray($user_list[0]);
	}
    
}

?>